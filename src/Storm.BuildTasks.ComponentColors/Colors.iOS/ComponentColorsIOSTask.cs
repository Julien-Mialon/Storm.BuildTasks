using System;
using System.CodeDom;
using System.Collections.Generic;
using System.Globalization;
using System.Reflection;
using Colors.Core;
using Storm.BuildTasks.Common.Extensions;

namespace Colors.iOS
{
	public class ComponentColorsIOSTask : BaseTask
	{
		protected override void GenerateForDirectory(string directory, Dictionary<string, string> keyValues)
		{
			GenerateColorService(keyValues);

			base.GenerateForDirectory(directory, keyValues);
		}

		protected override void GenerateForProject(List<string> keys)
		{
			GenerateColors(keys);

			base.GenerateForProject(keys);
		}

		protected virtual void GenerateColorService(Dictionary<string, string> keyValues)
		{
			var codeUnit = new CodeCompileUnit();

			//add namespace
			var codeNamespace = new CodeNamespace(GenerationNamespace);
			codeUnit.Namespaces.Add(codeNamespace);

			codeNamespace.Imports.Add(new CodeNamespaceImport("System"));

			//create class
			var classDeclaration = new CodeTypeDeclaration(ColorConstants.IMPLEMENTATION_SERVICE_NAME)
			{
				IsClass = true,
				TypeAttributes = TypeAttributes.Public
			};
			classDeclaration.BaseTypes.Add(ColorConstants.INTERFACE_SERVICE_NAME);
			codeNamespace.Types.Add(classDeclaration);

			//methode
			var method = new CodeMemberMethod()
			{
				Name = ColorConstants.SERVICE_METHOD_NAME,
				ReturnType = new CodeTypeReference(typeof(uint)),
				Attributes = MemberAttributes.Public
			};
			method.Parameters.Add(new CodeParameterDeclarationExpression(ColorConstants.ENUM_NAME, "key"));
			classDeclaration.Members.Add(method);

			var methodParam = new CodeVariableReferenceExpression("key");

			foreach (var pair in keyValues)
			{
				var condition = new CodeConditionStatement(
					new CodeBinaryOperatorExpression(
						methodParam,
						CodeBinaryOperatorType.IdentityEquality,
						new CodePropertyReferenceExpression(new CodeVariableReferenceExpression(ColorConstants.ENUM_NAME), pair.Key)),
					new CodeMethodReturnStatement(new CodePrimitiveExpression(ProcessValue(pair.Value))));

				method.Statements.Add(condition);
			}

			method.Statements.Add(new CodeThrowExceptionStatement(new CodeObjectCreateExpression(typeof(ArgumentOutOfRangeException))));

			codeUnit.WriteToFile(ColorConstants.IMPLEMENTATION_SERVICE_FILE_PATH, "This file was generated by ComponentColors tasks for iOS");
			OutputCompileFilePath.Add(ColorConstants.IMPLEMENTATION_SERVICE_FILE_PATH);
		}

		private uint ProcessValue(string value)
		{
			if (uint.TryParse(value, out var color))
			{
				return color;
			}
			else
			{
				Log.LogError($"Can't transform {value} in uint");
				return 0;
			}
		}

		protected virtual void GenerateColors(List<string> keys)
		{
			var codeUnit = new CodeCompileUnit();
			// for class declaration
			var codeNamespace = new CodeNamespace(GenerationNamespace);
			codeUnit.Namespaces.Add(codeNamespace);

			codeNamespace.Imports.Add(new CodeNamespaceImport("System"));

			// create class
			var classDeclaration = new CodeTypeDeclaration(ColorConstants.COLORS_NAME)
			{
				IsClass = true,
				TypeAttributes = TypeAttributes.NestedAssembly | TypeAttributes.Sealed,
			};
			codeNamespace.Types.Add(classDeclaration);

			//private constructor
			var constructor = new CodeConstructor
			{
				Attributes = MemberAttributes.Private
			};
			classDeclaration.Members.Add(constructor);

			//static initialize method
			const string fieldName = "_service";

			//field
			var field = new CodeMemberField($"Func<{ColorConstants.INTERFACE_SERVICE_NAME}>", fieldName)
			{
				Attributes = MemberAttributes.Private | MemberAttributes.Static
			};
			classDeclaration.Members.Add(field);

			//initialize method
			var initializeMethod = new CodeMemberMethod
			{
				Name = "Initialize",
				Attributes = MemberAttributes.Public | MemberAttributes.Static
			};
			initializeMethod.Parameters.Add(new CodeParameterDeclarationExpression($"Func<{ColorConstants.INTERFACE_SERVICE_NAME}>", "service"));
			initializeMethod.Statements.Add(new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(ColorConstants.COLORS_NAME), fieldName), new CodeVariableReferenceExpression("service")));
			classDeclaration.Members.Add(initializeMethod);

			var contextReference = new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(ColorConstants.COLORS_NAME), fieldName), "Invoke"));
			var getStringMethod = new CodeMethodReferenceExpression(contextReference, ColorConstants.SERVICE_METHOD_NAME);
			foreach (var key in keys)
			{
				var property = new CodeMemberProperty
				{
					Name = key,
					Type = new CodeTypeReference(typeof(uint)),
					Attributes = MemberAttributes.Public | MemberAttributes.Static
				};

				property.GetStatements.Add(new CodeMethodReturnStatement(
					new CodeMethodInvokeExpression(getStringMethod, new CodePropertyReferenceExpression(new CodeVariableReferenceExpression(ColorConstants.ENUM_NAME), key))
				));
				classDeclaration.Members.Add(property);
			}

			codeUnit.WriteToFile(ColorConstants.COLORS_FILE_PATH, "This file was generated by ComponentColors task for iOS");
			OutputCompileFilePath.Add(ColorConstants.COLORS_FILE_PATH);
		}
	}
}