using System.CodeDom;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Authentication.ExtendedProtection;
using Colors.Core;
using Storm.BuildTasks.Common.Extensions;

namespace Colors.iOS
{
	public class ComponentColorsIOSTask : BaseTask
	{
		protected override bool IsCurrentPlatformKey(string key) => key.IsIosString();

		protected override void GenerateForDirectory(string directory, Dictionary<string, uint> keyValues)
		{
			base.GenerateForDirectory(directory, keyValues);
		}

		protected override void GenerateForProject(List<string> keys)
		{
			GenerateColors(keys);

			base.GenerateForProject(keys);
		}

		protected virtual void GenerateColorService()
		{
			//TODO GENERATE RETURN UICOLOR
		}

		protected virtual void GenerateColors(List<string> keys)
		{
			var codeUnit = new CodeCompileUnit();
			// for class declaration
			var codeNamespace = new CodeNamespace(GenerationNamespace);
			codeUnit.Namespaces.Add(codeNamespace);

			codeNamespace.Imports.Add(new CodeNamespaceImport("System"));

			// create class
			var classDeclaration = new CodeTypeDeclaration(ColorConstants.COLORS_NAME)
			{
				IsClass = true,
				TypeAttributes = TypeAttributes.NestedAssembly | TypeAttributes.Sealed,
			};
			codeNamespace.Types.Add(classDeclaration);

			//private constructor
			var constructor = new CodeConstructor
			{
				Attributes = MemberAttributes.Private
			};
			classDeclaration.Members.Add(constructor);

			//static initialize method
			const string fieldName = "_service";

			//field
			var field = new CodeMemberField($"Func<{ColorConstants.INTERFACE_SERVICE_NAME}>", fieldName)
			{
				Attributes = MemberAttributes.Private | MemberAttributes.Static
			};
			classDeclaration.Members.Add(field);

			//initialize method
			var initializeMethod = new CodeMemberMethod
			{
				Name = "Initialize",
				Attributes = MemberAttributes.Public | MemberAttributes.Static
			};
			initializeMethod.Parameters.Add(new CodeParameterDeclarationExpression($"Func<{ColorConstants.INTERFACE_SERVICE_NAME}>", "service"));
			initializeMethod.Statements.Add(new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(ColorConstants.COLORS_NAME), fieldName), new CodeVariableReferenceExpression("service")));
			classDeclaration.Members.Add(initializeMethod);

			var contextReference = new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(ColorConstants.COLORS_NAME), fieldName), "Invoke"));
			var getStringMethod = new CodeMethodReferenceExpression(contextReference, ColorConstants.SERVICE_METHOD_NAME);
			foreach (var key in keys)
			{
				var property = new CodeMemberProperty
				{
					Name = key,
					Type = new CodeTypeReference(typeof(uint)),
					Attributes = MemberAttributes.Public | MemberAttributes.Static
				};

				property.GetStatements.Add(new CodeMethodReturnStatement(
					new CodeMethodInvokeExpression(getStringMethod, new CodePropertyReferenceExpression(new CodeVariableReferenceExpression(ColorConstants.ENUM_NAME), key))
				));
				classDeclaration.Members.Add(property);
			}

			codeUnit.WriteToFile(ColorConstants.COLORS_FILE_PATH, "This file was generated by Localization task for PCL");
			OutputCompileFilePath.Add(ColorConstants.COLORS_FILE_PATH);
		}
	}
}